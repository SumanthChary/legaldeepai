import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Mail, FileText, Share2, Settings, Cloud } from 'lucide-react';
import { useGoogleIntegration } from '@/hooks/useGoogleIntegration';
import { GoogleDrivePicker } from './GoogleDrivePicker';

interface GoogleIntegrationPanelProps {
  documentTitle?: string;
  documentContent?: string;
  analysisId?: string;
}

export const GoogleIntegrationPanel: React.FC<GoogleIntegrationPanelProps> = ({
  documentTitle = 'Document Analysis',
  documentContent = '',
  analysisId
}) => {
  const [emailRecipient, setEmailRecipient] = useState('');
  const [emailSubject, setEmailSubject] = useState(`Document Analysis: ${documentTitle}`);
  const [emailBody, setEmailBody] = useState('Please find the attached document analysis.');
  const [showEmailForm, setShowEmailForm] = useState(false);
  
  const { 
    isLoading, 
    isAuthenticated, 
    authenticate, 
    exportToGoogleDocs, 
    sendViaGmail 
  } = useGoogleIntegration();

  const handleExportToDocs = async () => {
    if (!isAuthenticated) {
      await authenticate();
    }
    
    try {
      const result = await exportToGoogleDocs(
        documentTitle,
        documentContent || 'No content available'
      );
      
      if (result?.url) {
        window.open(result.url, '_blank');
      }
    } catch (error) {
      console.error('Export failed:', error);
    }
  };

  const handleSendEmail = async () => {
    if (!emailRecipient.trim()) {
      return;
    }

    if (!isAuthenticated) {
      await authenticate();
    }

    try {
      const fullEmailBody = `
        <h2>${emailSubject}</h2>
        <p>${emailBody || 'Please find the document analysis attached.'}</p>
        <hr>
        <h3>Analysis Results</h3>
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">
          ${documentContent ? documentContent.replace(/\n/g, '<br>') : 'No content available'}
        </div>
        <br>
        <p><small>This analysis was generated by LegalDeep AI</small></p>
      `;

      await sendViaGmail(emailRecipient, emailSubject, fullEmailBody);
      
      // Reset form
      setEmailRecipient('');
      setEmailBody('');
      setShowEmailForm(false);
    } catch (error) {
      console.error('Email send failed:', error);
    }
  };

  return (
    <div className="space-y-6">
      {/* Google Drive Integration */}
      <GoogleDrivePicker
        onFileSelect={(file) => {
          console.log('Selected file:', file);
          // Handle file selection - could trigger document import/analysis
        }}
        onUpload={(file) => {
          console.log('Uploaded file:', file);
          // Handle file upload completion
        }}
      />

      {/* Export and Share Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Share2 className="w-5 h-5" />
            Export & Share
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Export to Google Docs */}
            <Button
              onClick={handleExportToDocs}
              disabled={isLoading || !documentContent}
              className="h-12 flex items-center gap-2"
              variant="outline"
            >
              <FileText className="w-4 h-4" />
              Export to Google Docs
            </Button>

            {/* Send via Gmail */}
            <Button
              onClick={() => setShowEmailForm(!showEmailForm)}
              className="h-12 flex items-center gap-2"
              variant="outline"
            >
              <Mail className="w-4 h-4" />
              Send via Gmail
            </Button>
          </div>

          {/* Email Form */}
          {showEmailForm && (
            <>
              <Separator />
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="email-to">Recipient Email</Label>
                    <Input
                      id="email-to"
                      type="email"
                      placeholder="client@example.com"
                      value={emailRecipient}
                      onChange={(e) => setEmailRecipient(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="email-subject">Subject</Label>
                    <Input
                      id="email-subject"
                      placeholder="Analysis Results"
                      value={emailSubject}
                      onChange={(e) => setEmailSubject(e.target.value)}
                    />
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="email-body">Message (Optional)</Label>
                  <Textarea
                    id="email-body"
                    placeholder="Add a personal message..."
                    rows={3}
                    value={emailBody}
                    onChange={(e) => setEmailBody(e.target.value)}
                  />
                </div>

                <div className="flex gap-2">
                  <Button
                    onClick={handleSendEmail}
                    disabled={isLoading || !emailRecipient.trim()}
                  >
                    {isLoading ? 'Sending...' : 'Send Email'}
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setShowEmailForm(false)}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Google Service Connection */}
      {!isAuthenticated && (
        <Card className="p-6 bg-blue-50 border-blue-200">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Settings className="w-5 h-5 text-blue-600" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">Connect Google Services</h3>
              <p className="text-sm text-gray-600">Connect to enable Google Docs export and Gmail sharing</p>
            </div>
          </div>
          
          <div className="space-y-4">
            <p className="text-sm text-gray-600">
              Connect your Google account to enable Drive, Docs, and Gmail.
            </p>
            <Button 
              onClick={authenticate} 
              disabled={isLoading}
              className="w-full"
            >
              {isLoading ? 'Connecting...' : 'Connect All Google Services'}
            </Button>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
              <Button
                variant="outline"
                disabled={isLoading}
                onClick={authenticate}
                className="w-full h-10 flex items-center gap-2"
              >
                <Cloud className="w-4 h-4" /> Connect Drive
              </Button>
              <Button
                variant="outline"
                disabled={isLoading}
                onClick={authenticate}
                className="w-full h-10 flex items-center gap-2"
              >
                <FileText className="w-4 h-4" /> Connect Docs
              </Button>
              <Button
                variant="outline"
                disabled={isLoading}
                onClick={authenticate}
                className="w-full h-10 flex items-center gap-2"
              >
                <Mail className="w-4 h-4" /> Connect Gmail
              </Button>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};